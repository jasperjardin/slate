@use "variables" as *;
@use "font-styles" as *;
@use "functions" as *;
@use "sass:map";
@use "sass:list";

@mixin aspect-ratio($width, $height) {
	aspect-ratio: calc($width / $height);

	&img {
		object-fit: cover;
	}

	&:not(img) {
		img {
			object-fit: cover;
		}

		@supports not (aspect-ratio: 1 / 1) {
			position: relative;
			height: 0;
			padding-bottom: calc($height / $width * 100%);

			img {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
			}
		}
	}
}

@mixin headings($include-class: true) {
	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		@content;
	}

	@if $include-class {
		.t1,
		.t2,
		.t3,
		.t4,
		.t5,
		.t6 {
			@content;
		}
	}
}

@mixin input-reset() {
	margin: 0;
	padding: 0;
	color: inherit;
	font: inherit;
	border: none;
	background: none;
	outline: none;
	box-shadow: none;
	-webkit-appearance: none;
	-moz-appearance: none;
	appearance: none;
}

@mixin btn-reset() {
	display: inline-block;
	padding: 0;
	text-decoration: none;
	border: none;
	background: none;
	cursor: pointer;
	appearance: none;
}

@mixin btn-small() {
	padding: $spacing-2xs $spacing-xs;
}

@mixin admin-bar-top {
	.admin-bar & {
		top: 32px;

		@media screen and (max-width: 782px) {
			top: 46px;
		}

		@media screen and (max-width: 600px) {
			top: 0;
		}
	}
}

@mixin btn-primary {
	@include btn-reset;
	@include action-button(false);
	padding: calc(#{$spacing-xs} - 1px) calc(#{$spacing-sm} - 1px);
	color: var(--buttons-primary-text);
	border: 1px solid var(--buttons-primary-border);
	border-radius: $border-radius;
	background: var(--buttons-primary-bg);
	transition: all 0.4s ease-in-out;

	&.btn-small {
		@include btn-small;
	}

	a:hover &,
	a:focus &,
	&:hover,
	&:focus {
		color: var(--buttons-primary-text-hover);
		border-color: var(--buttons-primary-border-hover);
		background: var(--buttons-primary-bg-hover);
	}
}

@mixin btn-secondary {
	@include btn-reset;
	@include action-button(false);
	padding: calc(#{$spacing-xs} - 1px) calc(#{$spacing-sm} - 1px);
	color: var(--buttons-secondary-text);
	border: 1px solid var(--buttons-secondary-border);
	border-radius: $border-radius;
	background: var(--buttons-secondary-bg);
	transition: all 0.4s ease-in-out;

	&.btn-small {
		@include btn-small;
	}

	a:hover &,
	a:focus &,
	&:hover,
	&:focus {
		color: var(--buttons-secondary-text-hover);
		border-color: var(--buttons-secondary-border-hover);
		background: var(--buttons-secondary-bg-hover);
	}
}

@mixin btn-tertiary {
	@include btn-reset;
	@include action-button(false);
	padding-block: $spacing-3xs;
	color: var(--buttons-tertiary-text);
	text-decoration: none;
	border-bottom: 1px solid var(--buttons-tertiary-border);
	background: var(--buttons-tertiary-bg);
	transition: all 0.4s ease-in-out;

	a:hover &,
	a:focus &,
	&:hover,
	&:focus {
		color: var(--buttons-tertiary-text-hover);
		border-color: var(--buttons-tertiary-border-hover);
		background: var(--buttons-tertiary-bg-hover);
	}
}

@mixin icon-font($icon, $size: 24, $after: true) {
	@if $after {
		&::after {
			content: $icon;
			font-weight: 400;
			font-size: r($size);
			font-family: impulse-icons, sans-serif;
			font-style: normal;
			font-variant: normal;
			line-height: 1;
			text-transform: none;
			-webkit-font-smoothing: antialiased;
			-moz-osx-font-smoothing: grayscale;
		}
	} @else {
		content: $icon;
		font-weight: 400;
		font-size: r($size);
		font-family: impulse-icons, sans-serif;
		font-style: normal;
		font-variant: normal;
		line-height: 1;
		text-transform: none;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
}

@mixin media-breakpoint-up($name) {
	@if map.has-key($grid-breakpoints, $name) {
		@media (min-width: map.get($grid-breakpoints, $name)) {
			@content;
		}
	} @else {
		@warn "Breakpoint `#{$name}` not found in `$grid-breakpoints` map.";
	}
}

@mixin media-breakpoint-down($name) {
	@if map.has-key($grid-breakpoints, $name) {
		@media (max-width: #{map.get($grid-breakpoints, $name) - 1px}) {
			@content;
		}
	} @else {
		@warn "Breakpoint `#{$name}` not found in `$grid-breakpoints` map.";
	}
}

@mixin media-breakpoint-only($name) {
	$min: map.get($grid-breakpoints, $name);
	$breakpoints: map.keys($grid-breakpoints);
	$next: null;

	@for $i from 1 through length($breakpoints) {
		@if $name == nth($breakpoints, $i) {
			$next: list.nth($breakpoints, $i + 1);
		}
	}

	$max: if($next, map.get($grid-breakpoints, $next) - 0.02px, null);

	@if $min != null and $max != null {
		@media (min-width: $min) and (max-width: $max) {
			@content;
		}
	} @else if $min != null {
		@media (min-width: $min) {
			@content;
		}
	}
}

@mixin sr-only {
	position: absolute !important;
	width: 1px !important;
	height: 1px !important;
	margin: -1px !important;
	padding: 0 !important;
	white-space: nowrap !important;
	border: 0 !important;
	overflow: hidden !important;
	clip: rect(0, 0, 0, 0) !important;
}

@mixin form-input {
	@include input-reset;
	@include action-form-input(false);
	padding: $spacing-2xs $spacing-xs;
	color: var(--text-body);
	border: 1px solid var(--general-line);
	border-radius: $border-radius;
	background-color: var(--general-box-bg);
	transition: border-color 0.3s ease, background-color 0.3s ease;

	&:not([type="file"]):not([type="range"]):not([readonly]) {
		&:hover,
		&:focus {
			color: var(--text-body);
			border-color: var(--general-action);
			background-color: var(--general-box-bg);
			box-shadow: none;
		}

		&:focus {
			// focus.
		}
	}

	&:invalid {
		background-color: var(--general-box-bg);
	}
}

@mixin bubble-tag {
	@include action-button-small(false);
	padding: $spacing-3xs $spacing-2xs;
	color: var(--buttons-primary-text);
	border-radius: $border-radius;
	background-color: var(--buttons-primary-bg);
}

// Mixin to Generate Global Themes from Colors Map
@mixin output-themes($paints) {
	// Get all unique theme types dynamically from the $paints map
	$theme-types: ();

	@each $theme-name, $theme-values in $paints {
		@each $theme-type, $value in $theme-values {
			@if not list.index($theme-types, $theme-type) {
				$theme-types: list.append($theme-types, $theme-type);
			}
		}
	}

	// Apply variables for the default theme (if it exists, usually "white") to :root
	@if list.index($theme-types, "white") {
		:root,
		[data-theme="white"] {
			@include theme("white", true);
		}
	}

	// Output variables for each theme dynamically
	@each $theme-type in $theme-types {
		@if $theme-type != "white" { // Skip "white" since it's already applied to :root
			[data-theme="#{$theme-type}"] {
				@include theme($theme-type, true);
			}
		}
	}
}

@mixin theme-vars {
	color: var(--text-body);
	background-color: var(--general-bg);
}

// Mixin to Apply Variables for a Specific Theme
@mixin theme($theme-type, $only-vars: false) {
	@if not $only-vars {
		@include theme-vars;
	}

	@each $theme-name, $theme-values in $paints {
		@if map.has-key($theme-values, $theme-type) {
			--#{$theme-name}: #{map.get($theme-values, $theme-type)};
		}
	}
}

@mixin has-content-width() {
	@each $size in (10, 8, 6) {
		&.has-content-width-#{$size} {
			@content($size);
		}
	}
}
